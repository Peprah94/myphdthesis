pred.median.samp <- list()
pred.sd.samp <- list()
pred.median.det <- list()
pred.sd.det <- list()
cov1.spix$cov11 <- cov1.spix$cov12 <- cov1.spix$cov13 <- cov1.spix$cov14 <- cov1.spix$layer
cov3.spix$cov31 <- cov3.spix$cov32 <- cov3.spix$cov33 <- cov3.spix$cov34 <- cov3.spix$layer
names(cov2.spix)<- "cov2"
if(nspecies == 4){
fit2 <- inlabru::bru(cmp,
lik1[[1]], lik1[[2]],lik1[[3]],lik1[[4]],
#unquote(paste0("lik1[[", 1:nspecies, "]]", collapse = ",")),
lik2[[1]],
#unquote(paste0("lik3[[", 1:nspecies, "]]", collapse = ",")),
lik3[[1]],lik3[[2]],lik3[[3]],lik3[[4]],
options = list(control.inla = list(strategy = "gaussian",
int.strategy = "eb"),
bru_method = list(
taylor = "pandemic",
search = "all",
factor = (1 + sqrt(5)) / 2,
rel_tol = 0.99,
max_step = 2,
lin_opt_method = "onestep"
), #change to 0.01
bru_max_iter=2)
)
}
if(nspecies == 3){
fit2 <- inlabru::bru(cmp,
lik1[[1]], lik1[[2]],lik1[[3]],
#unquote(paste0("lik1[[", 1:nspecies, "]]", collapse = ",")),
lik2[[1]],
#unquote(paste0("lik3[[", 1:nspecies, "]]", collapse = ",")),
lik3[[1]],lik3[[2]],lik3[[3]],
options = list(control.inla = list(strategy = "gaussian",
int.strategy = "eb"),
bru_method = list(
taylor = "pandemic",
search = "all",
factor = (1 + sqrt(5)) / 2,
rel_tol = 0.99,
max_step = 2,
lin_opt_method = "onestep"
), #change to 0.01
bru_max_iter=2)
)
}
if(nspecies == 2){
fit2 <- inlabru::bru(cmp,
lik1[[1]], lik1[[2]],
#unquote(paste0("lik1[[", 1:nspecies, "]]", collapse = ",")),
lik2[[1]],
#unquote(paste0("lik3[[", 1:nspecies, "]]", collapse = ",")),
lik3[[1]],lik3[[2]],
options = list(control.inla = list(strategy = "gaussian",
int.strategy = "eb"),
bru_method = list(
taylor = "pandemic",
search = "all",
factor = (1 + sqrt(5)) / 2,
rel_tol = 0.01,
max_step = 2,
lin_opt_method = "onestep"
), #change to 0.01
bru_max_iter=20)
)
}
inla.setOption(pardiso.license= "pardiso.lic")
control.compute=list(openmp.strategy="pardiso.parallel")
message("Getting data from environment")
csdata <- get("csdata",envir = parent.frame())
cssampdata <- get("cssampdata",envir = parent.frame())
detdata <- get("detdata",envir = parent.frame())
covs <- get("covs",envir = parent.frame())
region <- get("region",envir = parent.frame())
mesh <- get("mesh",envir = parent.frame())
listout <- get("listout",envir = parent.frame())
cnt  <- get("cnt",envir =  parent.frame())
cnt <- assign("cnt",cnt+1,envir = parent.frame())
print(cnt)
message(paste0("Calling INLA function ", cnt, " times."))
# Organizing the inputs
message("Extracting the constants")
nspecies = nrow(omega)
tmp <- csdata$classification
Eco_PPFinal_detect <- list()
for(i in 1:nspecies){
message(paste0("Sorting detection dataframe for species ", i))
Eco_PPFinal_detect[[i]] <- tmp[which(tmp$error==i),]}
Samp_PPFinal <- cssampdata
data_det_spframe <- detdata
aa <- region
message("Defining components of the INLABru")
cmp1 <- list()
for(i in 1:nspecies){
cmp1[[i]] <- (paste0("+ beta0",i,"(1)",
"+ beta0thin(1)",
"+ beta0det" ,i, "(1)",
"+w1",i,"(main = coordinates, model =","spdes[[",i, "]])",
"+ w2(main = coordinates, model = spde2)+",
"cov1",i, "(main=cov1.spix,model='linear') +",
"cov2(main=cov2.spix,model='linear')+",
"cov3",i, "(main=cov3.spix,model='linear')"))
}
cmp <- as.formula(paste0("~ -1",do.call("paste0",cmp1)))
fun <- function(x,y,z){
-log(1+exp((x+y+z)))
}
fun1 <- function(x,y){
-log(1+exp((x+y)))
}
# Function that takes omega with the parameters of INLABru
if(nspecies == 4){
funtionOmega <-  function(a,d,g,j, b,e, h,k, c,f,i,l, x){
ret <- log(omega[1,x]*plogis(a+b+c) + omega[2,x]*plogis(d+e+f) +
omega[3,x]*plogis(g+h+i) + omega[4,x]*plogis(j+k+l))
return(ret)
}
}
if(nspecies == 3){
funtionOmega <-  function(a,d,g, b,e, h, c,f,i, x){
ret <- log(omega[1,x]*plogis(a+b+c) + omega[2,x]*plogis(d+e+f) +
omega[3,x]*plogis(g+h+i))
return(ret)
}
}
if(nspecies == 2){
funtionOmega <-  function(a,d, b,e, c,f, x){
ret <- log(omega[1,x]*plogis(a+b+c) + omega[2,x]*plogis(d+e+f))
return(ret)
}
}
#Likelihoods of INLABru
lik1 <- lik2 <- lik3 <- list()
for(i in 1:nspecies){
lik1[[i]] <- inlabru::like("cp",
formula = as.formula(paste0("coordinates ~ beta0",i,"  + cov1",
i," + w1",i, "+ beta0thin + cov2 + w2 + fun(beta0thin,cov2,w2)+ beta0det",
i,"+cov3",i,"+fun1(beta0det",i,", cov3",i,")",
"+funtionOmega(",paste0("beta0", 1:nspecies, collapse = ","),
",",  paste0("cov1", 1:nspecies, collapse = ","),
",",  paste0("w1", 1:nspecies, collapse = ","),  ")")),
data = Eco_PPFinal_detect[[i]],
#components = cmp,
domain = list(coordinates = mesh),
samplers = aa)
lik2[[i]] <- inlabru::like("cp",
formula = coordinates ~ beta0thin + cov2 + w2,
data = Samp_PPFinal,
#components = cmp,
domain = list(coordinates = mesh),
samplers = aa)
lik3[[i]] <- inlabru::like("binomial",
formula = as.formula(paste0("detdata",i," ~ beta0det",i," + cov3",i)),
data = data_det_spframe[[i]],
#components = cmp,
domain = list(coordinates = mesh),
samplers = aa)
}
#prediction points
predpoints <- expand.grid(x=seq(0,3,length.out = 128),y=seq(0,3,length.out = 128))
cov1.pred <- cos(predpoints$x) - sin(predpoints$y - 2)
cov2.pred <- cos(2*predpoints$x) - sin(2*predpoints$y-4)
cov3.pred <- (predpoints$x/2)^2+(predpoints$y/2)^2
inlabru:::iinla.setOption("iinla.verbose", TRUE)
pred.median.eco <- list()
pred.sd.eco <- list()
pred.median.samp <- list()
pred.sd.samp <- list()
pred.median.det <- list()
pred.sd.det <- list()
cov1.spix$cov11 <- cov1.spix$cov12 <- cov1.spix$cov13 <- cov1.spix$cov14 <- cov1.spix$layer
cov3.spix$cov31 <- cov3.spix$cov32 <- cov3.spix$cov33 <- cov3.spix$cov34 <- cov3.spix$layer
names(cov2.spix)<- "cov2"
if(nspecies == 4){
fit2 <- inlabru::bru(cmp,
lik1[[1]], lik1[[2]],lik1[[3]],lik1[[4]],
#unquote(paste0("lik1[[", 1:nspecies, "]]", collapse = ",")),
lik2[[1]],
#unquote(paste0("lik3[[", 1:nspecies, "]]", collapse = ",")),
lik3[[1]],lik3[[2]],lik3[[3]],lik3[[4]],
options = list(control.inla = list(strategy = "gaussian",
int.strategy = "eb"),
bru_method = list(
taylor = "pandemic",
search = "all",
factor = (1 + sqrt(5)) / 2,
rel_tol = 0.99,
max_step = 2,
lin_opt_method = "onestep"
), #change to 0.01
bru_max_iter=2)
)
}
if(nspecies == 3){
fit2 <- inlabru::bru(cmp,
lik1[[1]], lik1[[2]],lik1[[3]],
#unquote(paste0("lik1[[", 1:nspecies, "]]", collapse = ",")),
lik2[[1]],
#unquote(paste0("lik3[[", 1:nspecies, "]]", collapse = ",")),
lik3[[1]],lik3[[2]],lik3[[3]],
options = list(control.inla = list(strategy = "gaussian",
int.strategy = "eb"),
bru_method = list(
taylor = "pandemic",
search = "all",
factor = (1 + sqrt(5)) / 2,
rel_tol = 0.99,
max_step = 2,
lin_opt_method = "onestep"
), #change to 0.01
bru_max_iter=2)
)
}
if(nspecies == 2){
fit2 <- inlabru::bru(cmp,
lik1[[1]], lik1[[2]],
#unquote(paste0("lik1[[", 1:nspecies, "]]", collapse = ",")),
lik2[[1]],
#unquote(paste0("lik3[[", 1:nspecies, "]]", collapse = ",")),
lik3[[1]],lik3[[2]],
options = list(control.inla = list(strategy = "gaussian",
int.strategy = "eb"),
bru_method = list(
taylor = "pandemic",
search = "all",
factor = (1 + sqrt(5)) / 2,
rel_tol = 0.01,
max_step = 2,
lin_opt_method = "onestep"
), #change to 0.01
bru_max_iter=20)
)
}
if(length(listout)==0){assign("listout",fit2)}
detection_data <- list()
for(i in 1:nspecies){
data_det <- vector("numeric", length(det_prob[[i]]))
for(j in 1:length(det_prob[[i]])){
data_det[j]<- rbinom(1,1, det_prob[[i]][j])
detection_data[[i]] <- data_det
}
}
#Organising as spatial dataframe
data_det_spframe <- list()
for(i in 1:nspecies){
data_det_spframe[[i]] <- SpatialPointsDataFrame(rndpts, data = data.frame(detection_data[[i]]))
names(data_det_spframe[[i]])<-paste0("detdata",i)
}
## the borders of the study region
coordsmat <- matrix(c(0,0,3,0,3,3,0,3,0,0),ncol=2,byrow=T)
poly <- SpatialPolygons(list(Polygons(list(Polygon(coordsmat)),ID=1)))
## the mesh
mesh <- inla.mesh.2d(loc.domain = coordsmat, offset = c(0.5, 1),
max.edge = c(0.5, 2), cutoff = 0.2)
mesh$n
## SPDEs definition
spdes <- list()
for(i in 1: nspecies){
spdes[[i]] <- inla.spde2.pcmatern(mesh = mesh,
# PC-prior on range: P(practic.range < 0.05) = 0.01
prior.range = c(input$ecological$hyperparameters$range[i], 0.5),
# PC-prior on sigma: P(sigma > 1) = 0.01
prior.sigma = c(sqrt(input$ecological$hyperparameters$sigma2[i]), 0.5))
}
#SPDEs for the thinning
spde2 <- inla.spde2.pcmatern(mesh = mesh,
# PC-prior on range: P(practic.range < 0.05) = 0.01
prior.range = c(input$sampling$hyperparameters$range, 0.5),
# PC-prior on sigma: P(sigma > 1) = 0.01
prior.sigma = c(sqrt(input$sampling$hyperparameters$sigma2), 0.5))
csdata = simulateddata$thirdstage
cssampdata = simulateddata$firststage$Samp_PPFinal
detdata = data_det_spframe
covslist <- list(cov1.spix,cov2.spix,cov3.spix)
spdeslist <- list(spdes=spdes,spde2=spde2)
covs = covslist
region=poly
mesh=mesh
data_df <- data.frame(
Y = csdata$classifications$error,
C = csdata$classifications$true_species,
eco_cov = extract(cov1.rast,csdata$classifications),
samp_cov= extract(cov2.rast,csdata$classifications),
det_cov = extract(cov3.rast,csdata$classifications))
#Testing the compiled function.
#Should give the same results as fit.inla
CnimbleINLA <- compileNimble(nimbleINLADataGenerating)
inla.setOption(pardiso.license= "pardiso.lic")
control.compute=list(openmp.strategy="pardiso.parallel")
message("Getting data from environment")
csdata <- get("csdata",envir = parent.frame())
cssampdata <- get("cssampdata",envir = parent.frame())
detdata <- get("detdata",envir = parent.frame())
covs <- get("covs",envir = parent.frame())
region <- get("region",envir = parent.frame())
mesh <- get("mesh",envir = parent.frame())
listout <- get("listout",envir = parent.frame())
cnt  <- get("cnt",envir =  parent.frame())
cnt <- assign("cnt",cnt+1,envir = parent.frame())
print(cnt)
message(paste0("Calling INLA function ", cnt, " times."))
# Organizing the inputs
message("Extracting the constants")
nspecies = nrow(omega)
tmp <- csdata$classification
Eco_PPFinal_detect <- list()
for(i in 1:nspecies){
message(paste0("Sorting detection dataframe for species ", i))
Eco_PPFinal_detect[[i]] <- tmp[which(tmp$error==i),]}
Samp_PPFinal <- cssampdata
data_det_spframe <- detdata
aa <- region
message("Defining components of the INLABru")
cmp1 <- list()
for(i in 1:nspecies){
cmp1[[i]] <- (paste0("+ beta0",i,"(1)",
"+ beta0thin(1)",
"+ beta0det" ,i, "(1)",
"+w1",i,"(main = coordinates, model =","spdes[[",i, "]])",
"+ w2(main = coordinates, model = spde2)+",
"cov1",i, "(main=cov1.spix,model='linear') +",
"cov2(main=cov2.spix,model='linear')+",
"cov3",i, "(main=cov3.spix,model='linear')"))
}
cmp <- as.formula(paste0("~ -1",do.call("paste0",cmp1)))
fun <- function(x,y,z){
-log(1+exp((x+y+z)))
}
fun1 <- function(x,y){
-log(1+exp((x+y)))
}
# Function that takes omega with the parameters of INLABru
if(nspecies == 4){
funtionOmega <-  function(a,d,g,j, b,e, h,k, c,f,i,l, x){
ret <- log(omega[1,x]*plogis(a+b+c) + omega[2,x]*plogis(d+e+f) +
omega[3,x]*plogis(g+h+i) + omega[4,x]*plogis(j+k+l))
return(ret)
}
}
if(nspecies == 3){
funtionOmega <-  function(a,d,g, b,e, h, c,f,i, x){
ret <- log(omega[1,x]*plogis(a+b+c) + omega[2,x]*plogis(d+e+f) +
omega[3,x]*plogis(g+h+i))
return(ret)
}
}
if(nspecies == 2){
funtionOmega <-  function(a,d, b,e, c,f, x){
ret <- log(omega[1,x]*plogis(a+b+c) + omega[2,x]*plogis(d+e+f))
return(ret)
}
}
#Likelihoods of INLABru
lik1 <- lik2 <- lik3 <- list()
for(i in 1:nspecies){
lik1[[i]] <- inlabru::like("cp",
formula = as.formula(paste0("coordinates ~ beta0",i,"  + cov1",
i," + w1",i, "+ beta0thin + cov2 + w2 + fun(beta0thin,cov2,w2)+ beta0det",
i,"+cov3",i,"+fun1(beta0det",i,", cov3",i,")",
"+funtionOmega(",paste0("beta0", 1:nspecies, collapse = ","),
",",  paste0("cov1", 1:nspecies, collapse = ","),
",",  paste0("w1", 1:nspecies, collapse = ","),  ")")),
data = Eco_PPFinal_detect[[i]],
#components = cmp,
domain = list(coordinates = mesh),
samplers = aa)
lik2[[i]] <- inlabru::like("cp",
formula = coordinates ~ beta0thin + cov2 + w2,
data = Samp_PPFinal,
#components = cmp,
domain = list(coordinates = mesh),
samplers = aa)
lik3[[i]] <- inlabru::like("binomial",
formula = as.formula(paste0("detdata",i," ~ beta0det",i," + cov3",i)),
data = data_det_spframe[[i]],
#components = cmp,
domain = list(coordinates = mesh),
samplers = aa)
}
#prediction points
predpoints <- expand.grid(x=seq(0,3,length.out = 128),y=seq(0,3,length.out = 128))
cov1.pred <- cos(predpoints$x) - sin(predpoints$y - 2)
cov2.pred <- cos(2*predpoints$x) - sin(2*predpoints$y-4)
cov3.pred <- (predpoints$x/2)^2+(predpoints$y/2)^2
inlabru:::iinla.setOption("iinla.verbose", TRUE)
pred.median.eco <- list()
pred.sd.eco <- list()
pred.median.samp <- list()
pred.sd.samp <- list()
pred.median.det <- list()
pred.sd.det <- list()
cov1.spix$cov11 <- cov1.spix$cov12 <- cov1.spix$cov13 <- cov1.spix$cov14 <- cov1.spix$layer
cov3.spix$cov31 <- cov3.spix$cov32 <- cov3.spix$cov33 <- cov3.spix$cov34 <- cov3.spix$layer
names(cov2.spix)<- "cov2"
if(nspecies == 4){
fit2 <- inlabru::bru(cmp,
lik1[[1]], lik1[[2]],lik1[[3]],lik1[[4]],
#unquote(paste0("lik1[[", 1:nspecies, "]]", collapse = ",")),
lik2[[1]],
#unquote(paste0("lik3[[", 1:nspecies, "]]", collapse = ",")),
lik3[[1]],lik3[[2]],lik3[[3]],lik3[[4]],
options = list(control.inla = list(strategy = "gaussian",
int.strategy = "eb"),
bru_method = list(
taylor = "pandemic",
search = "all",
factor = (1 + sqrt(5)) / 2,
rel_tol = 0.99,
max_step = 2,
lin_opt_method = "onestep"
), #change to 0.01
bru_max_iter=2)
)
}
if(nspecies == 3){
fit2 <- inlabru::bru(cmp,
lik1[[1]], lik1[[2]],lik1[[3]],
#unquote(paste0("lik1[[", 1:nspecies, "]]", collapse = ",")),
lik2[[1]],
#unquote(paste0("lik3[[", 1:nspecies, "]]", collapse = ",")),
lik3[[1]],lik3[[2]],lik3[[3]],
options = list(control.inla = list(strategy = "gaussian",
int.strategy = "eb"),
bru_method = list(
taylor = "pandemic",
search = "all",
factor = (1 + sqrt(5)) / 2,
rel_tol = 0.99,
max_step = 2,
lin_opt_method = "onestep"
), #change to 0.01
bru_max_iter=2)
)
}
if(nspecies == 2){
fit2 <- inlabru::bru(cmp,
lik1[[1]], lik1[[2]],
#unquote(paste0("lik1[[", 1:nspecies, "]]", collapse = ",")),
lik2[[1]],
#unquote(paste0("lik3[[", 1:nspecies, "]]", collapse = ",")),
lik3[[1]],lik3[[2]],
options = list(control.inla = list(strategy = "gaussian",
int.strategy = "eb"),
bru_method = list(
taylor = "pandemic",
search = "all",
factor = (1 + sqrt(5)) / 2,
rel_tol = 0.01,
max_step = 2,
lin_opt_method = "onestep"
), #change to 0.01
bru_max_iter=20)
)
}
summary(fit2)
fit2 <- inlabru::bru(cmp,
lik1[[1]], lik1[[2]],
#unquote(paste0("lik1[[", 1:nspecies, "]]", collapse = ",")),
lik2[[1]],
#unquote(paste0("lik3[[", 1:nspecies, "]]", collapse = ",")),
lik3[[1]],lik3[[2]],
options = list(control.inla = list(#strategy = "gaussian",
int.strategy = "eb"),
bru_method = list(
#taylor = "pandemic",
# search = "all",
#factor = (1 + sqrt(5)) / 2,
rel_tol = 0.01,
#max_step = 2,
#lin_opt_method = "onestep"
), #change to 0.01
bru_max_iter=20)
)
fit2 <- inlabru::bru(cmp,
lik1[[1]], lik1[[2]],
#unquote(paste0("lik1[[", 1:nspecies, "]]", collapse = ",")),
lik2[[1]],
#unquote(paste0("lik3[[", 1:nspecies, "]]", collapse = ",")),
lik3[[1]],lik3[[2]],
options = list(control.inla = list(#strategy = "gaussian",
int.strategy = "eb"),
bru_method = list(
#taylor = "pandemic",
# search = "all",
#factor = (1 + sqrt(5)) / 2,
rel_tol = 0.01#,
#max_step = 2,
#lin_opt_method = "onestep"
), #change to 0.01
bru_max_iter=20)
)
summary(fit2)
fit2 <- inlabru::bru(cmp,
lik1[[1]], lik1[[2]],
#unquote(paste0("lik1[[", 1:nspecies, "]]", collapse = ",")),
lik2[[1]],
#unquote(paste0("lik3[[", 1:nspecies, "]]", collapse = ",")),
lik3[[1]],lik3[[2]],
options = list(control.inla = list(strategy = "gaussian",
int.strategy = "eb"),
bru_method = list(
#taylor = "pandemic",
# search = "all",
#factor = (1 + sqrt(5)) / 2,
rel_tol = 0.01#,
#max_step = 2,
#lin_opt_method = "onestep"
), #change to 0.01
bru_max_iter=20)
)
summary(fit2)
